#include "OBCS_OPTIONS.h"

      SUBROUTINE OBCS_CALC( futureTime, futureIter,
     &                      uVel, vVel, wVel, theta, salt,
     &                      myThid )
C     *==========================================================*
C     | SUBROUTINE OBCS_CALC
C     | o Calculate future boundary data at open boundaries
C     |   at time = futureTime
C     *==========================================================*
      IMPLICIT NONE

C     === Global variables ===
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#ifdef ALLOW_EXCH2
#include "W2_EXCH2_SIZE.h"
#endif /* ALLOW_EXCH2 */
#include "SET_GRID.h"
#include "GRID.h"
#include "OBCS_PARAMS.h"
#include "OBCS_GRID.h"
#include "OBCS_FIELDS.h"
#include "EOS.h"

C     == Routine arguments ==
      INTEGER futureIter
      _RL futureTime
      _RL uVel (1-OLx:sNx+OLx,1-OLy:sNy+OLy,Nr,nSx,nSy)
      _RL vVel (1-OLx:sNx+OLx,1-OLy:sNy+OLy,Nr,nSx,nSy)
      _RL wVel (1-OLx:sNx+OLx,1-OLy:sNy+OLy,Nr,nSx,nSy)
      _RL theta(1-OLx:sNx+OLx,1-OLy:sNy+OLy,Nr,nSx,nSy)
      _RL salt (1-OLx:sNx+OLx,1-OLy:sNy+OLy,Nr,nSx,nSy)
      INTEGER myThid

#ifdef ALLOW_OBCS

C     == Local variables ==
      INTEGER bi, bj
      INTEGER I, J ,K

      _RL obTimeScale,Uinflow,rampTime2
      _RL vertStructU(Nr), vertStructW(Nr), N2(Nr), N2o(Nr) 
      _RL vertStructUo(Nr)
      _RL kx
      _RL tmpsum

        data vertStructUo / 0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,
     & 0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.21,0.20,0.19,0.18,0.16,
     & 0.15,0.14,0.13,0.12,0.11,0.10,0.10,0.09,0.09,0.08,0.07,0.07,
     & 0.06,0.06,0.05,0.04,0.04,0.03,0.03,0.02,0.02,0.01,0.01,0.01,
     & 0.01,0.01,0.07,0,0,0,0,0,0,0,0,-0.01,-0.01,
     & -0.01,-0.02,-0.02,-0.02,-0.03,-0.04,-0.04,-0.05,-0.05,-0.06,
     & -0.07,-0.07,-0.08,-0.08,-0.09,-0.09,-0.10,-0.10,-0.11,-0.12,
     & -0.13,-0.14,-0.16,-0.16,-0.18,-0.19,-0.20,-0.21,-0.23,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,-0.24,
     & -0.24,-0.24,-0.24,-0.24,-0.24,-0.24/
        data vertStructW / 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0 /
        data N2o / 0.00009636,0.00012856,0.00009649,0.00009654,0.00012881,0,0,
     & 0,0,0,0,0,0,0,0.00003222,0,0,-0.00003222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.00003,0,0,0,
     & -0.00003,0,0,0,0,0,0,0,0,0,-0.00003218,-0.00003218,0,-0.00003217,-0.00003216,
     & 0,0,-0.00003216,-0.00003215,-0.00003214,0,-0.00003214,-0.00003213,0,-0.0000321,0,-0.00003211,
     & 0,
     & -0.000064,-0.000064,-0.00003208,
     & -0.000064,-0.000064,-0.000032,
     & -0.000064,0,-0.00003202,-0.00006402,0,-0.000191,-0.000191,
     & -0.000191,-0.000191,-0.000191,-0.0001908,-0.00019058,-0.00019036,-0.00019014,
     & -0.00018991,0,-0.0003476,-0.00034685,-0.00034610,-0.00034535,
     & -0.000344,
     & -0.000343,
     & -0.0003431,
     & -0.00034234,-0.00034159,-0.00034084,0,-0.0003092,
     & -0.00030858,-0.00030796,-0.00030734,
     & -0.00030672,-0.0003061,-0.000305,-0.0002744,
     & -0.000304,
     & -0.0003036,0,-0.0003333,-0.00033257,-0.0003016,-0.0003311,
     & -0.0003303,-0.0003296,-0.000299,-0.0003281,-0.0003274,-0.0003266,0,
     & -0.0003555,-0.0003541,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     & 0,-0.00038315,-0.00035274,-0.00035184,-0.00038015,
     & -0.00034997,-0.00034907,
     & -0.00034817,-0.00037617,0,-0.00043273,-0.00043132,-0.00045852,
     & -0.00042841,
     & -0.000427,-0.00045392,-0.00042409,-0.00042268,-0.00044931,
     & -0.00041977,0,
     & -0.00050186,-0.00052753,-0.00049768,-0.00052312,-0.0004935,
     & -0.0005187,-0.00048931,
     & -0.00048727,-0.00051213,-0.00048308,0,-0.00053437,
     & -0.00053185,-0.00052933,
     & -0.00052680,-0.00055043,-0.00052163,-0.00051911,
     & -0.00051658,-0.00051405,-0.00051153,
     & 0,-0.000509,-0.00050647,-0.00052907,-0.00050128,
     & -0.00049874,-0.00049621,
     & -0.00049367,-0.00049114,-0.00003946,-0.00002025,
     & 0,-0.00001531,-0.00001523,
     & -0.00001516,-0.00001429,-0.00001501,-0.00001493,
     &-0.00001485,-0.00001478,-0.00001470,
     & -0.00001462,0,-0.00001073,-0.00001145,-0.00001064,
     &-0.00001135,-0.00001055,
     & -0.00001126,-0.00001047,-0.00001117,-0.00001038,
     &-0.00001108,0,-0.00000809,
     & -0.00000807,-0.00000877,-0.00000801,-0.00000799,
     &-0.00000796,-0.00000865,-0.00000791,
     & -0.00000788,-0.00000785,0,-0.0000057,-0.00000568,
     & -0.00000496,-0.00000566,
     & -0.00000494,-0.00000563,-0.00000562,-0.00000490,
     & -0.00000559,-0.00000488,0,
     & -0.00003319,-0.00002525,-0.00002563,-0.00003127,
     & -0.00002624,-0.00002975,-0.00004063,
     & -0.00003667,-0.0000212,-0.00001507,-0.00000997,
     & -0.00000449,-0.00000303,-0.00000183,
     & -0.00000093,-0.0000004 /

      do K=1,Nr
       N2(K) = N2o(K)
      enddo

C Create a vertical structure function with zero mean
      tmpsum=0.
      do K=1,Nr
C       vertStructWst(K)=cos(mz*PI* (rC(K)/rF(Nr+1)) )
       tmpsum=tmpsum+vertStructUo(K)*drF(K)
      enddo
      tmpsum=tmpsum/rF(Nr+1)
      do K=1,Nr
       vertStructU(K)=vertStructUo(K)-tmpsum
      enddo
c
      obTimeScale = 44567.0 _d 0
       kx=2. _d 0*pi/(2.0*4700.0 _d 0)
     &  *sqrt((2.0 _d 0*pi*2.0 _d 0*pi/(obTimeScale*obTimeScale)
     & - f0*f0)/(1.0 _d -6
     & - 2.0 _d 0*pi*2.0 _d 0*pi/(obTimeScale*obTimeScale)))
        Uinflow = 0.5 _d 0
C *NOTE* I have commented out the ramp function below
C just to speed things up. You will probably want to use it
C for smoother looking solutions.
      rampTime2 = 44567.0 _d 0

      DO bj=myByLo(myThid),myByHi(myThid)
      DO bi=myBxLo(myThid),myBxHi(myThid)

C     Western OB
      IF (useOrlanskiWest) THEN
        CALL ORLANSKI_WEST(
     &          bi, bj, futureTime, 
     &          uVel, vVel, wVel, theta, salt, 
     &          myThid )
      ELSE
        DO K=1,Nr
          DO J=1-Oly,sNy+Oly
          OBWu(J,K,bi,bj)=0. _d 0
     &       +Uinflow
     &       *vertStructU(K)
     &       *sin(2. _d 0*PI*futureTime/obTimeScale)
     &       *(exp(futureTime/rampTime2)
     &   - exp(-futureTime/rampTime2))
     &   /(exp(futureTime/rampTime2)
     &  + exp(-futureTime/rampTime2))
     &   *cos(kx*(3. _d 0-2. _d 0-0.5 _d 0)*delX(1))
          OBWv(J,K,bi,bj)=0. _d 0
     &       +Uinflow
     &       *f0/(2.0 _d 0*PI/obTimeScale)
     &       *vertStructU(K)
     &       *cos(2. _d 0*PI*futureTime/obTimeScale )
     & * (exp(futureTime/rampTime2)
     &   - exp(-futureTime/rampTime2))
     &   /(exp(futureTime/rampTime2)
     &  + exp(-futureTime/rampTime2))
          OBWt(J,K,bi,bj)=tRef(K)
     & + Uinflow*vertStructW(K)
     & * sin(2.0 _d 0*PI*futureTime/obTimeScale)
     & /(2.0 _d 0*PI/obTimeScale)
     & *(N2(K)/(tAlpha*gravity))
     & * (exp(futureTime/rampTime2)
     &   - exp(-futureTime/rampTime2))
     &   /(exp(futureTime/rampTime2)
     &  + exp(-futureTime/rampTime2))
#ifdef ALLOW_NONHYDROSTATIC
          OBWw(J,K,bi,bj)= 0.0 
     &       -Uinflow
     &       * vertStructW(K)
     &       *cos(2. _d 0*PI*futureTime/obTimeScale)
     &       *(exp(futureTime/rampTime2)
     &   - exp(-futureTime/rampTime2))
     &   /(exp(futureTime/rampTime2)
     &  + exp(-futureTime/rampTime2))
#endif
          ENDDO
        ENDDO
      ENDIF
C--   end bi,bj loops.
      ENDDO 
      ENDDO

#endif /* ALLOW_OBCS */
      RETURN
      END